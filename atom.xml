<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Notebook</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-12T09:13:50.927Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ZZL</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java内部类</title>
    <link href="http://example.com/2022/12/12/Java%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://example.com/2022/12/12/Java%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2022-12-12T08:41:28.000Z</published>
    <updated>2022-12-12T09:13:50.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么局部内部类和匿名内部类只能访问局部final变量？"><a href="#为什么局部内部类和匿名内部类只能访问局部final变量？" class="headerlink" title="为什么局部内部类和匿名内部类只能访问局部final变量？"></a>为什么局部内部类和匿名内部类只能访问局部final变量？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前被这个问题困扰过，直到最近看了几篇文章之后，对Java内部类才有了更进一步的认识。</p><p>默认情况下，编译器会为匿名内部类和局部内部类起名为<code>外部类名x.class</code>(x为正整数)，上面这段代码会被编译成2个class文件，Test.class和Test1.class，Test1.class对应test方法中Thread的匿名内部类</p><p>代码中a或者b这2个变量必须由<code>final</code>修饰，否则编译不通过，即局部内部类只能访问局部final变量，为什么有这种限制呢？我们从代码执行的生命周期寻找答案。当test方法执行完毕之后，变量a的生命周期就结束了，而此时Thread对象的生命周期很可能还没有结束，那么在Thread的run方法中继续访问变量a就变成不可能了，但是又要实现这样的效果，怎么办呢？Java采用了<code>复制</code>的手段来解决这个问题。将代码的字节码反编译可以得到下面的内容：</p><img src="https://cdn.jsdelivr.net/gh/zzl33366/for_pic_go/img/image-20221212165648662.png" alt="image-20221212165648662" style="zoom:50%;" /><p>在run方法中有一条指令：</p><blockquote><p>bipush 10</p></blockquote><p>这条指令的操作是将操作数10压栈，表示使用的是一个本地局部变量。这个步骤是在编译期间由编译器默认执行，如果变量的值在编译期间可以确定，则编译器默认会在匿名内部类（局部内部类）的常量池中添加一个内容相等的量或直接将相应的字节码嵌入到执行字节码中。这样一来，匿名内部类使用的变量是另一个局部变量，只不过值和方法中局部变量的值相等，得以和方法中的局部变量完全独立开</p><p>另一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译后得到：</p><img src="https://cdn.jsdelivr.net/gh/zzl33366/for_pic_go/img/image-20221212170303515.png" alt="image-20221212170303515" style="zoom: 33%;" /><p>可以看到匿名内部类Test$1的构造器含有两个参数，一个是指向外部类对象的引用，一个是int型变量。显然，这里是将变量test方法中的形参a以参数的形式传进来（变量a的拷贝）进行赋值初始化。</p><p>综合上面2个例子，如果局部变量的值在编译期间就可以确定，则直接在匿名内部类里创建一个拷贝。如果局部变量的值无法在编译期间确定，则通过构造器传参的方式来对拷贝进行初始化赋值。那么在run方法中访问的变量a根本就不是test方法中的局部变量a，这样一来就解决了前面所说的生命周期不一致的问题。</p><p>但是这种方式引入了新的问题，既然在run方法中访问的变量a和test方法中的变量a不是同一个变量，在run方法中改变a的值，会造成数据不一致，为了解决这个问题，java编译器就限定必须将变量a限制为final变量，不允许对变量a进行更改（对于引用类型的变量，是不允许指向新的对象），这样数据不一致性的问题就得以解决了。</p><p> 参考：<a href="https://www.cnblogs.com/latter/p/5665015.html">https://www.cnblogs.com/latter/p/5665015.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;为什么局部内部类和匿名内部类只能访问局部final变量？&quot;&gt;&lt;a href=&quot;#为什么局部内部类和匿名内部类只能访问局部final变量？&quot; class=&quot;headerlink&quot; title=&quot;为什么局部内部类和匿名内部类只能访问局部final变量？&quot;&gt;&lt;/a&gt;为什</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>GitHub SSH配置</title>
    <link href="http://example.com/2022/08/21/GitHub%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/08/21/GitHub%E9%85%8D%E7%BD%AE/</id>
    <published>2022-08-21T13:32:40.000Z</published>
    <updated>2022-08-23T02:10:50.738Z</updated>
    
    <content type="html"><![CDATA[<p>当前电脑上已经有了公司的GitLab配置，想要再配置GitHub的ssh，操作步骤如下：</p><h3 id="1-创建SSH-key，执行命令一路回车即可"><a href="#1-创建SSH-key，执行命令一路回车即可" class="headerlink" title="1. 创建SSH key，执行命令一路回车即可"></a>1. 创建SSH key，执行命令一路回车即可</h3><pre><code>ssh-keygen -t rsa -C &quot;注册邮箱&quot; -f ~/.ssh/id_rsa_github</code></pre><h3 id="2-配置config文件"><a href="#2-配置config文件" class="headerlink" title="2. 配置config文件"></a>2. 配置config文件</h3><pre><code>vim ~/.ssh/config</code></pre><p>在文件中添加以下内容</p><pre><code>HOST github.comhostname github.comUser github用户名IdentityFile C:\Users\Administrator\.ssh\id_rsa_githubPreferredAuthentications publickey</code></pre><h3 id="3-将第一步中生成的公钥文件（id-rsa-github-pub）中的内容配置到github中"><a href="#3-将第一步中生成的公钥文件（id-rsa-github-pub）中的内容配置到github中" class="headerlink" title="3. 将第一步中生成的公钥文件（id_rsa_github.pub）中的内容配置到github中"></a>3. 将第一步中生成的公钥文件（id_rsa_github.pub）中的内容配置到github中</h3><h3 id="4-测试连接"><a href="#4-测试连接" class="headerlink" title="4. 测试连接"></a>4. 测试连接</h3><pre><code>ssh -vT git@github.com</code></pre><p>出现以下提示说明连接已成功：<br>You’ve successfully authenticated, but GitHub does not provide shell access   </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当前电脑上已经有了公司的GitLab配置，想要再配置GitHub的ssh，操作步骤如下：&lt;/p&gt;
&lt;h3 id=&quot;1-创建SSH-key，执行命令一路回车即可&quot;&gt;&lt;a href=&quot;#1-创建SSH-key，执行命令一路回车即可&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="环境配置" scheme="http://example.com/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Git回滚提交记录</title>
    <link href="http://example.com/2020/11/23/Git%E5%9B%9E%E6%BB%9A%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2020/11/23/Git%E5%9B%9E%E6%BB%9A%E6%8F%90%E4%BA%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2020-11-23T01:54:41.000Z</published>
    <updated>2022-09-05T04:42:43.478Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-查看Git提交记录"><a href="#1-查看Git提交记录" class="headerlink" title="1. 查看Git提交记录"></a>1. 查看Git提交记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/zzl33366/for_pic_go/img/image-20220905112011366.png" alt="image-20220905112011366" style="zoom:50%;" /><h3 id="2-回滚本地提交记录"><a href="#2-回滚本地提交记录" class="headerlink" title="2. 回滚本地提交记录"></a>2. 回滚本地提交记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset [--soft]|[--mixed]|[--hard] &lt;commitID&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">命令</th><th>影响暂存区</th><th>影响工作区</th><th></th></tr></thead><tbody><tr><td align="left">git reset –soft <commitId></td><td>N</td><td>N</td><td>执行此命令后，将当前分支的本地仓库回退到commId对应的那次提交，并将已提交的文件保存到暂存区。工作区和暂存区中的其他文件不受影响</td></tr><tr><td align="left">git reset –mixed <commitId></td><td>Y</td><td>N</td><td>执行此命令后，将当前分支的本地仓库回退到commId对应的那次提交，将已提交的文件保存到工作区，暂存区中的其他文件也将被保存到工作区，即清空了暂存区。–mixed是默认参数，如果git reset 命令不加参数，将使用默认参数–mixed</td></tr><tr><td align="left">git reset –hard <commitId></td><td>Y</td><td>Y</td><td>执行此命令后，将当前分支的本地仓库回退到commId对应的那次提交，已提交的文件会丢失，原暂存区和工作区会被清空</td></tr></tbody></table><p>执行上述命令时，除了使用<code>&lt;commitId&gt;</code>以外，也可以使用<code>head</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git reset <span class="built_in">head</span>^</span><br><span class="line">git reset <span class="built_in">head</span>~1</span><br><span class="line"><span class="comment"># 上面两种方式是等效的，即回退本地仓库最近一次的提交，将这次提交中的文件恢复到工作区</span></span><br><span class="line"></span><br><span class="line">git reset <span class="built_in">head</span>^^</span><br><span class="line">git reset <span class="built_in">head</span>~2</span><br><span class="line"><span class="comment"># 上面两种方式是等效的，即回退本地仓库最近两次的提交，将这2次提交中的文件恢复到工作区</span></span><br></pre></td></tr></table></figure><h3 id="3-回退远端的提交记录"><a href="#3-回退远端的提交记录" class="headerlink" title="3. 回退远端的提交记录"></a>3. 回退远端的提交记录</h3><p>在回退了本地的提交记录后，远端比本地超前，可使用如下命令将本地分支强制推送到远端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br><span class="line">或</span><br><span class="line">git push --force</span><br></pre></td></tr></table></figure><p>很有可能在推送时会有如下报错</p><blockquote><p>You are not allowed to force push code to a protected branch on this project</p></blockquote><p>可调整仓库配置，允许强制推送。</p><p><img src="https://cdn.jsdelivr.net/gh/zzl33366/for_pic_go/img/image-20220905122011245.png" alt="image-20220905122011245"></p><p><img src="https://cdn.jsdelivr.net/gh/zzl33366/for_pic_go/img/image-20220905122037486.png" alt="image-20220905122037486"></p><p>我们可以在个人工程中进行此配置，<em><strong>对于公司里的工程不建议强制推送</strong></em>，可以考虑使用更安全的回滚方式，即 <code>git revert</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回滚最近一次的提交</span></span><br><span class="line">git revert <span class="built_in">head</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚倒数第二次的提交</span></span><br><span class="line">git revert <span class="built_in">head</span>^</span><br><span class="line">git revert <span class="built_in">head</span>~1</span><br><span class="line"><span class="comment"># 注意 git revert 和 git reset 在此处有差异</span></span><br><span class="line"><span class="comment"># git reset head^ 是撤销本地仓库最近一次的提交</span></span><br><span class="line"><span class="comment"># git reset head 用于将暂存区的文件恢复到工作区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚commitId对应的这一次提交</span></span><br><span class="line">git revert &lt;commitId&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-查看Git提交记录&quot;&gt;&lt;a href=&quot;#1-查看Git提交记录&quot; class=&quot;headerlink&quot; title=&quot;1. 查看Git提交记录&quot;&gt;&lt;/a&gt;1. 查看Git提交记录&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;tab</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
</feed>
